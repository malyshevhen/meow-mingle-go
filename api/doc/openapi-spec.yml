openapi: "3.0.3"

info:
  title: Meow Mingle social media app
  version: 0.0.1

servers:
  - url: http://127.0.0.1:8080/api/v1

tags:
  - name: Comments
  - name: Feed
  - name: Posts
  - name: Reactions
  - name: Subscription
  - name: Users
  - name: Registration

paths:
  /login:
    post:
      tags:
        - Login
      operationId: login
      responses:
        204:
          description: User login successfully
        401:
          $ref: "#/components/responses/401"
        500:
          $ref: "#/components/responses/500"
  /users/register:
    post:
      tags:
        - Registration
      operationId: register
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserRegistration"
      responses:
        201:
          description: User registered
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserInfo"
        400:
          $ref: "#/components/responses/400"
        500:
          $ref: "#/components/responses/500"
  /users/{id}:
    patch:
      tags:
        - Users
      operationId: updateUsername
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            minimum: 1
        - name: username
          in: query
          required: true
          schema:
            type: string
            nullable: false
      responses:
        200:
          description: Username updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserInfo"
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
    delete:
      tags:
        - Users
      operationId: deleteUser
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            minimum: 1
      responses:
        200:
          description: User deleted successfully
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
  /users/{id}/subscriptions:
    post:
      tags:
        - Subscription
      operationId: subscribe
      parameters:
        - name: id
          in: path
          description: User ID to subscribe
          required: true
          schema:
            type: string
            nullable: false
      responses:
        204:
          description: Subscribed successfully
        304:
          $ref: "#/components/responses/304"
        401:
          $ref: "#/components/responses/401"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
    delete:
      tags:
        - Subscription
      operationId: unsubscribe
      parameters:
        - name: userId
          in: query
          required: true
          schema:
            type: string
            nullable: false
      responses:
        200:
          description: Unsubscribed successfully
        401:
          $ref: "#/components/responses/401"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
  /users/{id}/posts:
    get:
      tags:
        - Posts
      description: Retrieve posts by specific user id
      operationId: getUserPosts
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Feed retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PostResponse"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
  /users/feed:
    get:
      tags:
        - Feed
      description: Get owner feed
      operationId: getOwnFeed
      responses:
        200:
          description: Feed retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PostResponse"
        401:
          $ref: "#/components/responses/401"
        500:
          $ref: "#/components/responses/500"
  /users/{id}/feed:
    get:
      tags:
        - Feed
      description: Get user feed by id of the user
      operationId: getUserFeed
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Feed retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PostResponse"
        401:
          $ref: "#/components/responses/401"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
  /posts:
    post:
      tags:
        - Posts
      description: Add new post
      operationId: publishPost
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PostRequest"
      responses:
        201:
          description: Post created successfully
        401:
          $ref: "#/components/responses/401"
        400:
          $ref: "#/components/responses/400"
        500:
          $ref: "#/components/responses/500"
  /posts/{id}:
    put:
      tags:
        - Posts
      description: Update post content
      operationId: updatePost
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            nullable: false
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PostRequest"
      responses:
        200:
          description: Post updated successfully
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
    delete:
      tags:
        - Posts
      description: Delete post
      operationId: deletePost
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            nullable: false
      responses:
        204:
          description: Post deleted successfully
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
  /posts/{id}/likes:
    post:
      tags:
        - Reactions
      description: Add like to post
      operationId: addLike
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            nullable: false
      responses:
        201:
          description: Like added
        401:
          $ref: "#/components/responses/401"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
    delete:
      tags:
        - Reactions
      description: Remove like from post
      operationId: removeLike
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            nullable: false
      responses:
        204:
          description: Like removed
        401:
          $ref: "#/components/responses/401"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
  /posts/{id}/comments:
    post:
      tags:
        - Comments
      operationId: addComment
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CommentRequest"
      responses:
        201:
          description: Comment added successfully
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
    get:
      tags:
        - Comments
      operationId: getPostComments
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: string
        - name: size
          in: query
          schema:
            type: integer
        - name: page
          in: query
          schema:
            type: integer
      responses:
        200:
          description: Comment retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CommentResponse"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
  /comments/{id}:
    put:
      tags:
        - Comments
      description: Update comment
      operationId: updateComment
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CommentRequest"
      responses:
        200:
          description: Comment updated successfully
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
    delete:
      tags:
        - Comments
      description: Delete existing comment
      operationId: deleteCommentById
      parameters:
        - name: id
          in: query
          required: true
          schema:
            type: string
      responses:
        204:
          description: Comment deleted successfully
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
  /comments/{id}/likes:
    post:
      tags:
        - Reactions
      description: Add like to Comment
      operationId: addLike
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            nullable: false
      responses:
        201:
          description: Like added
        401:
          $ref: "#/components/responses/401"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
    delete:
      tags:
        - Reactions
      description: Remove like from Comment
      operationId: removeLike
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            nullable: false
      responses:
        204:
          description: Like removed
        401:
          $ref: "#/components/responses/401"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"

components:
  responses:
    304:
      description: Not modified
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
    400:
      description: Request not valid
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
    401:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
    403:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
    404:
      description: Not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
    500:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"

  schemas:
    ErrorResponse:
      type: object
      properties:
        message:
          type: string
        timestamp:
          type: integer
    CommentRequest:
      type: object
      properties:
        content:
          type: string
          minLength: 3
          maxLength: 300
          nullable: false
    CommentResponse:
      type: object
      properties:
        id:
          type: string
          nullable: false
        authorId:
          type: string
          nullable: false
        content:
          type: string
          minLength: 3
          maxLength: 300
          nullable: false
        created:
          type: string
          format: date
          nullable: false
        updated:
          type: string
          format: date
          nullable: false
    PostRequest:
      type: object
      properties:
        content:
          type: string
          minLength: 3
          maxLength: 300
          nullable: false
    PostResponse:
      type: object
      properties:
        id:
          type: string
          nullable: false
        authorId:
          type: string
          nullable: false
        content:
          type: string
          nullable: false
        likes:
          type: array
          items:
            $ref: "#/components/schemas/UserInfo"
        comments:
          type: array
          items:
            $ref: "#/components/schemas/CommentResponse"
        created:
          type: string
          format: date
          nullable: false
        updated:
          type: string
          format: date
          nullable: false
    UserRegistration:
      type: object
      properties:
        email:
          type: string
          format: email
          nullable: false
        lastName:
          type: string
          minLength: 3
          maxLength: 20
          nullable: false
        firstName:
          type: string
          minLength: 3
          maxLength: 20
          nullable: false
        password:
          type: string
          nullable: false
    UserInfo:
      type: object
      properties:
        id:
          type: string
          nullable: false
        username:
          type: string
          nullable: false
